import sys
import os


def swap(fname, destroy):
    data = []
    for line in open(fname, 'r').readlines():
        data.append(line.replace('\n', ''))
    if destroy:
        os.remove(fname)
    return data


def cmd(command, verbose):
    """

    :param command:
    :param verbose:
    :return:
    """
    data_out = []
    os.system(command+' >> tmp.txt')
    if verbose:
        os.system('cat tmp.txt')
    for line in open('tmp.txt', 'r').readlines():
        data_out.append(line.replace('\n', ''))
    os.remove('tmp.txt')
    return data_out


def host_discovery(ip, flags):
    """

    :param ip:
    :param flags:
    :return:
    """
    subnet = ''
    for sub in ip.split('.')[0:len(ip.split('.')) - 1]:
        subnet += sub + '.'
    print '\033[1m\033[31mScanning %s0/24\033[0m' % subnet
    os.system('nmap %s %s0/24 -oN hosts.txt' % (flags, subnet))

    scan = {'': []}
    for line in open('hosts.txt', 'r').readlines():
        ln = line.replace('\n', '')
        try:
            host = ln.split('Nmap scan report for ')[1]
            scan[host] = []
            Found = True
        except IndexError:
            pass
        try:
            popen = ln.split(' open ')[1]
            scan[host].append(popen)
        except IndexError:
            pass
    os.remove('hosts.txt')
    return scan


def scrape_proc_data(pfile):
    hooks = []
    data = swap(pfile, True)
    for line in data:
        try:
            id = line.split(' ')[1].replace(' ','')
            fd = line.split(' ').pop(-4)
            if id:
                print "PID: %s FD: %s" % (id, fd)
                hooks.append(fd)
        except IndexError:
            pass
        except KeyError:
            pass
    return {int(id): hooks}


''' Find Running Processes to attach to '''
exe_finder = 'ps aux | grep root | grep xfsalloc | cut -b 10-16 >> procs.txt'
os.system(exe_finder)
pids = swap('procs.txt', True)
for pid in pids:
    proc = int(pid.replace(' ',''))
    print '[*] Found Root PID: %d' % proc
    if proc > 10000:
        file_out = str(proc)+'.txt'
        os.system('lsof -p %d >> %s' % (proc, file_out))
        hook_loc = scrape_proc_data(file_out)
        shim = hook_loc[proc].pop()
        os.system('strace %s' % shim)
        # TODO: ^^ Scrape Memory Location From Output

# TODO: Exploit Memory Location Access for LPE
# libs = '#include <stdio.h>\n#include <string.h>\n'
# bad_c = 'void main (int argc, char *argv[]){\n}'
# prog_data = libs+bad_c
# open('example.c', 'w').write(prog_data)
# os.system('gcc -g -o example example.c; rm example.c')
# os.system('rm example')

if '-lan' in sys.argv:
    ip = cmd('ifconfig | grep broadcast | cut -b 14-28', True).pop()
    lan_scan = host_discovery(ip, '')
