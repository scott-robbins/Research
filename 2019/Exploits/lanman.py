import socket
import time
import sys
import os

tic = time.time()


def swap(file_name, destroy):
    data = []
    for line in open(file_name,'r').readlines():
        data.append(line.replace('\n', ''))
    if destroy:
        os.remove(file_name)
    return data


def create_timestamp():
    date = time.localtime(time.time())
    mo = str(date.tm_mon)
    day = str(date.tm_mday)
    yr = str(date.tm_year)

    hr = str(date.tm_hour)
    min = str(date.tm_min)
    sec = str(date.tm_sec)

    date = mo + '/' + day + '/' + yr
    timestamp = hr + ':' + min + ':' + sec
    return date, timestamp


def parse_scan(scan_file):
    data_out = {'host': '', 'ports': []}

    for line in open(scan_file, 'r').readlines():
        line = line.replace('\n', '')
        if len(line.split(' open ')) >= 2:
            data_out['ports'].append(line.split(' open ')[0])
        try:
            data_out['host'] = line.split('Nmap scan report for ')[1]
        except IndexError:
            pass
    print data_out
    return data_out


def LAN_Enum(verbose):
    hosts = []
    cmd = 'nmap -sn 192.168.1.0/24 >> hosts.txt'
    os.system(cmd)
    for line in swap('hosts.txt', True):
        try:
            host = line.split(' scan report for ')[1]
            try:
                # s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                profiler = 'nmap -sV -F %s >> scan.txt' % host
                os.system(profiler)
                parse_scan('scan.txt')
            except:
                pass
            hosts.append(host)
        except IndexError:
            pass
    if verbose:
        print '[*] %d Hosts found on LAN' % len(hosts)
    return hosts


if '-lsc' in sys.argv:
    lan_peers = LAN_Enum(True)
    print lan_peers

print '\033[1mFINISHED [\033[3m%ss Elapsed\033[0m\033[1m]\033[0m' % str(time.time()-tic)
